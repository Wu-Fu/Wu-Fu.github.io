[{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-02-18T06:46:21.822Z","categories_index":"","tags_index":"","author_index":"碔砆"},{"id":"48433a70b7e09e957d48f01fa1012852","title":"STL","content":"STLSTL——OIWiki\n共同点\n声明形式： 容器名&lt;数据类型&gt; 变量名\n\n迭代器：用来访问和检查STL容器中的元素的对象，与数据指针类似。主要支持自增（++）和解引用（*）运算符，其中自增用来移动迭代器，解引用可以获取或修改它指向的元素。\n  用法：容器名&lt;数据类型&gt;::iterator（可用auto代替）\n\n共有函数\n  = 赋值运算符以及复制构造函数\n  begin() 返回指向开头元素的迭代器\n  end() 返回指向末尾的下一个元素的迭代器。\n  size() 返回容器的元素个数\n  max_size() 返回容器理论上能储存最大的元素个数\n  empty() 返回元素是否为空\n  swap() 交换两个容器\n  clear() 清空容器\n  比较运算符 按字典序比较两个元素的大小\n\n\n序列式容器vectorstd::vector 是STL提供的内存连续的，可变长度的数组。\n能提供线性复杂度的插入和删除，以及常数复杂度的随机访问\n优点\n可以动态分配内存\n重写了比较运算符和赋值运算符\n初始化简单，可以&#123; &#125;或者=\n\n初始化操作vector&lt;数据类型&gt; 变量名(初始空间，初始值)\n创建拷贝 vector&lt;数据类型&gt; 变量名(被拷贝的变量名)\n移动整个容器 vector&lt;数据类型&gt; 变量名(std::move(原容器))\n成员函数 at(pos),operator[pos] 返回下标为pos的元素\n front() 返回首元素的引用\n back() 返回末尾元素的引用\n data() 返回数组第一个元素的指针\n resize() 改变vector的长度，多退少补\n reserve() 使得vector预留一定内存空间，避免不必要的内存拷贝\n insert() 支持在某个迭代器位置插入元素，线性复杂度\n erase() 删除某个迭代其或者区间的元素，返回最后被删除的迭代器\n push_back() 在末尾插入一个元素\n pop_back() 删除末尾元素\narray std::array是STL提供的内存连续、长度固定的数组数据结构,本质是对原生数组的直接封装\n成员函数at(pos),operator[pos] 返回下标为pos的元素\n front() 返回首元素的引用\n back() 返回末尾元素的引用\n data() 返回数组第一个元素的指针\n fill(指定值) 以指定值填充容器\ndequestd::deque是STL提供的双端队列数据结构\n成员函数同vector\npush_front() 在头部插入一个元素\npop_front() 删除头部元素\nliststd::list 是STL提供的一个双向链表数据结构\n成员函数同deque\n关联式容器setset是关联容器，含有键值类型对象的已排序集\n内部通常采用红黑树实现\n插入与删除操作insert(x) 当容器中没有等价元素的时候，将元素 x 插入到 set 中。\nerase(x) 删除值为 x 的 所有 元素，返回删除元素的个数。\nerase(pos) 删除迭代器为 pos 的元素，要求迭代器必须合法。\nerase(first,last) 删除迭代器在$[First,last)$范围内的所有元素。\n迭代器begin() 返回指向首元素的迭代器，其中 *begin = front\nend() 返回指向数组尾端占位符的迭代器，注意是没有元素的。\nrbegin() 返回指向逆向数组的首元素的逆向迭代器，可以理解为正向容器的末元素。\nrend() 返回指向逆向数组末元素后一位置的迭代器，对应容器首的前一个位置，没有元素。\n查找操作count(x) 返回键值为x的元素数量\nfind(x) 存在键值为x的元素时会返回该元素的迭代器\nlower_bound(x) 返回指向首个不小于给定键的元素的迭代器。如果不存在这样的元素，返回 end()\nupper_bound(x) 返回指向首个大于给定键的元素的迭代器。如果不存在这样的元素，返回end()\nmapmap是有序键值对容器，它的元素的键是唯一的。map通常实现为红黑树\n搜索、移除和插入操作拥有对数复杂度\nmap&lt;Key,T&gt; mp\n操作查询操作同set\n操作与删除操作同set\n可以直接通过下标访问来进行查询或插入操作。例如mp[&quot;Alan&quot;]=100\n通过向 map 中插入一个类型为pair&lt;Key, T&gt;的值可以达到插入元素的目的，例如mp.insert(pair&lt;string,int&gt;(&quot;Alan&quot;,100))\n容器适配器栈std::stack是一种FILO的容器适配器\n操作top() 访问栈顶元素\npop() 删除栈顶元素\npush(x) 向栈顶插入x元素\nempty() 询问容器是否为空\nsize() 查询容器中的元素数量\n队列std::queue是一种FIFO的容器适配器\n操作同stack\nfront() 访问队首元素\n优先队列std::priority_queue\n操作同queue\n其他非STL容器bitsetstringpairstd::pair 是标准库中定义的一个类模板。用于将两个变量关联在一起，组成一个“对”，而且两个变量的数据类型可以是不同的。\n操作初始化\n可以在定义时直接完成pair的初始化\n也可以使用先定义，后赋值的方法完成pair的初始化\n还可以使用std::make_pair函数。\n该函数接受两个变量，并返回由这两个变量组成的pair\n一种常用的方法是使用宏定义#define mp make_pair，将有些冗长的make_pair化简为mp\nmake_pair可以配合auto使用，以避免显式声明数据类型\n访问\n通过成员函数first与second,可以访问pair中包含的两个变量\n比较\n&lt;、&gt;、&lt;=、&gt;= 四个运算符会先比较两个pair中的第一个变量，在第一个变量相等的情况下再比较第二个变量\n算法部分next_permutation通常用于生成序列的全排列title: STLdate: 2022-01-15 20:53:20tags: 算法categories: 算法\n\nSTLSTL——OIWiki\n共同点\n声明形式： 容器名&lt;数据类型&gt; 变量名\n\n迭代器：用来访问和检查STL容器中的元素的对象，与数据指针类似。主要支持自增（++）和解引用（*）运算符，其中自增用来移动迭代器，解引用可以获取或修改它指向的元素。\n  用法：容器名&lt;数据类型&gt;::iterator（可用auto代替）\n\n共有函数\n  = 赋值运算符以及复制构造函数\n  begin() 返回指向开头元素的迭代器\n  end() 返回指向末尾的下一个元素的迭代器。\n  size() 返回容器的元素个数\n  max_size() 返回容器理论上能储存最大的元素个数\n  empty() 返回元素是否为空\n  swap() 交换两个容器\n  clear() 清空容器\n  比较运算符 按字典序比较两个元素的大小\n\n\n序列式容器vectorstd::vector 是STL提供的内存连续的，可变长度的数组。\n能提供线性复杂度的插入和删除，以及常数复杂度的随机访问\n优点\n可以动态分配内存\n重写了比较运算符和赋值运算符\n初始化简单，可以&#123; &#125;或者=\n\n初始化操作vector&lt;数据类型&gt; 变量名(初始空间，初始值)\n创建拷贝 vector&lt;数据类型&gt; 变量名(被拷贝的变量名)\n移动整个容器 vector&lt;数据类型&gt; 变量名(std::move(原容器))\n成员函数 at(pos),operator[pos] 返回下标为pos的元素\n front() 返回首元素的引用\n back() 返回末尾元素的引用\n data() 返回数组第一个元素的指针\n resize() 改变vector的长度，多退少补\n reserve() 使得vector预留一定内存空间，避免不必要的内存拷贝\n insert() 支持在某个迭代器位置插入元素，线性复杂度\n erase() 删除某个迭代其或者区间的元素，返回最后被删除的迭代器\n push_back() 在末尾插入一个元素\n pop_back() 删除末尾元素\narray std::array是STL提供的内存连续、长度固定的数组数据结构,本质是对原生数组的直接封装\n成员函数at(pos),operator[pos] 返回下标为pos的元素\n front() 返回首元素的引用\n back() 返回末尾元素的引用\n data() 返回数组第一个元素的指针\n fill(指定值) 以指定值填充容器\ndequestd::deque是STL提供的双端队列数据结构\n成员函数同vector\npush_front() 在头部插入一个元素\npop_front() 删除头部元素\nliststd::list 是STL提供的一个双向链表数据结构\n成员函数同deque\n关联式容器setset是关联容器，含有键值类型对象的已排序集\n内部通常采用红黑树实现\n插入与删除操作insert(x) 当容器中没有等价元素的时候，将元素 x 插入到 set 中。\nerase(x) 删除值为 x 的 所有 元素，返回删除元素的个数。\nerase(pos) 删除迭代器为 pos 的元素，要求迭代器必须合法。\nerase(first,last) 删除迭代器在$[First,last)$范围内的所有元素。\n迭代器begin() 返回指向首元素的迭代器，其中 *begin = front\nend() 返回指向数组尾端占位符的迭代器，注意是没有元素的。\nrbegin() 返回指向逆向数组的首元素的逆向迭代器，可以理解为正向容器的末元素。\nrend() 返回指向逆向数组末元素后一位置的迭代器，对应容器首的前一个位置，没有元素。\n查找操作count(x) 返回键值为x的元素数量\nfind(x) 存在键值为x的元素时会返回该元素的迭代器\nlower_bound(x) 返回指向首个不小于给定键的元素的迭代器。如果不存在这样的元素，返回 end()\nupper_bound(x) 返回指向首个大于给定键的元素的迭代器。如果不存在这样的元素，返回end()\nmapmap是有序键值对容器，它的元素的键是唯一的。map通常实现为红黑树\n搜索、移除和插入操作拥有对数复杂度\nmap&lt;Key,T&gt; mp\n操作查询操作同set\n操作与删除操作同set\n可以直接通过下标访问来进行查询或插入操作。例如mp[&quot;Alan&quot;]=100\n通过向 map 中插入一个类型为pair&lt;Key, T&gt;的值可以达到插入元素的目的，例如mp.insert(pair&lt;string,int&gt;(&quot;Alan&quot;,100))\n容器适配器栈std::stack是一种FILO的容器适配器\n操作top() 访问栈顶元素\npop() 删除栈顶元素\npush(x) 向栈顶插入x元素\nempty() 询问容器是否为空\nsize() 查询容器中的元素数量\n队列std::queue是一种FIFO的容器适配器\n操作同stack\nfront() 访问队首元素\n优先队列std::priority_queue\n操作同queue\n其他非STL容器bitsetstringpairstd::pair 是标准库中定义的一个类模板。用于将两个变量关联在一起，组成一个“对”，而且两个变量的数据类型可以是不同的。\n操作初始化\n可以在定义时直接完成pair的初始化\n也可以使用先定义，后赋值的方法完成pair的初始化\n还可以使用std::make_pair函数。\n该函数接受两个变量，并返回由这两个变量组成的pair\n一种常用的方法是使用宏定义#define mp make_pair，将有些冗长的make_pair化简为mp\nmake_pair可以配合auto使用，以避免显式声明数据类型\n访问\n通过成员函数first与second,可以访问pair中包含的两个变量\n比较\n&lt;、&gt;、&lt;=、&gt;= 四个运算符会先比较两个pair中的第一个变量，在第一个变量相等的情况下再比较第二个变量\n算法部分next_permutation通常用于生成序列的全排列\n","slug":"STL","date":"2022-01-15T12:53:20.000Z","categories_index":"算法","tags_index":"算法","author_index":"碔砆"},{"id":"c18469ab20e7b093d36b4a61728d07eb","title":"并查集","content":"并查集并查集——OIwiki\n并查集——知乎\n种类并查集——知乎\n应用\n并查集判环\n\n","slug":"并查集","date":"2022-01-13T07:25:39.000Z","categories_index":"算法","tags_index":"算法","author_index":"碔砆"}]