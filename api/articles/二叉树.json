{"title":"二叉树","uid":"563a71603f1af2b0a426978adee1756b","slug":"二叉树","date":"2022-04-20T01:49:36.000Z","updated":"2023-02-18T11:09:03.548Z","comments":true,"path":"api/articles/二叉树.json","keywords":null,"cover":null,"content":"<h1 id=\"二叉树\">二叉树</h1>\r\n<h2 id=\"树\">树</h2>\r\n<h4 id=\"定义\">定义</h4>\r\n<p>一棵树t是一个非空的有限元素的集合，其中一个元素为根（root），其余元素组成t的子树（subtree）</p>\r\n<p>在层次数据中最高层的元素是根，其直接下一级元素是子树的根</p>\r\n<h4 id=\"树的画法\">树的画法</h4>\r\n<p>在画一棵树时，每一个元素都代表一个节点。树根画在最上方，其子树画在下面。在根和子树的根之间有一条边。子树结构相同。</p>\r\n<p>在树中没有子元素的元素称为叶（leaf）</p>\r\n<h4 id=\"术语\">术语</h4>\r\n<p><strong>级</strong> ：树根是1级，子节点是父节点级树+1</p>\r\n<p><strong>高度（深度）</strong> ：树中级的个数</p>\r\n<p><strong>度</strong>：一个结点的子节点个数，一棵树的度是其元素的度的最大值</p>\r\n<h2 id=\"二叉树-1\">二叉树</h2>\r\n<h4 id=\"定义-1\">定义</h4>\r\n<p>一棵<strong>二叉树（binary tree）</strong>\r\nt是有限个元素的集合（可以为空）。当二叉树非空时，其中有一个元素称为根，余下的元素被划分为两颗二叉树，分别称为t的左子树和右子树。</p>\r\n<h4 id=\"和树的根本区别\">和树的根本区别</h4>\r\n<ul>\r\n<li>二叉树的每个元素都恰好有两颗子树。而树的每个元素可有任意数量的子树</li>\r\n<li>在二叉树中，每个元素的子树都是有序的，有左子树和右子树之分。而树的子树是无序的</li>\r\n</ul>\r\n<h3 id=\"二叉树的特性\">二叉树的特性</h3>\r\n<p><strong>特性1</strong> 一棵二叉树有n个元素，n&gt;0，它有n-1条边</p>\r\n<p><strong>特性2</strong>\r\n一棵二叉树的高度为h，h&gt;=0，它最少有h个元素，最多有2<sup>h</sup>\r\n-1个元素</p>\r\n<p><strong>特性3</strong>\r\n一棵二叉树有n个元素，n&gt;0，它的高度最大为n，最小高度为[log<sub>2</sub>(n+1)]</p>\r\n<p><strong>特性4</strong>\r\n一棵非空二叉树的第i层上至多有2<sup>i-1</sup>个节点</p>\r\n<p><strong>满二叉树</strong> 当高度为h的二叉树恰好有2<sup>h</sup>\r\n-1个元素时，称其为满二叉树。</p>\r\n<p><strong>完全二叉树</strong>\r\n对高度为h的满二叉树的元素，从第一层到最后一层，在每一次中从左至右，顺序编号，从1到2<sup>h</sup>\r\n-1。从中删除k个其编号为</p>\r\n<p><strong>2<sup>h</sup>-i</strong>元素，1&lt;=i&lt;=k&lt;2<sup>h</sup>,所得到的二叉树被称为完全二叉树，即按从上到下，从左到右的顺序编号，号码与满二叉树一致</p>\r\n<p><strong>特性5</strong>\r\n设完全二叉树的一元素其编号为i，1&lt;=i&lt;=n。有以下关系成立</p>\r\n<ul>\r\n<li>如果i=1，则该元素为二叉树的根。若i&gt;1，则其父节点的编号为 i/2</li>\r\n<li>如果2i&gt;n，则该元素无左孩子。否则，其左孩子的编号的编号为2i</li>\r\n<li>如果2i+1&gt;n，则该元素无右孩子。否证，其右孩子的编号为 2i+1</li>\r\n</ul>\r\n<h3 id=\"二叉树的描述\">二叉树的描述</h3>\r\n<p>数组描述：按照编号存储在数组的相应位置里。</p>\r\n<p>仅在缺少的元素数目比较少时适用</p>\r\n<p>链表描述：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">binaryTreeNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    T element;</span><br><span class=\"line\">    binaryTreeNode&lt;T&gt; *leftChild,*rightChild;</span><br><span class=\"line\">    <span class=\"built_in\">binaryTreeNode</span>() &#123;leftChild = rightChild = <span class=\"literal\">NULL</span>;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">binaryTreeNode</span>(<span class=\"type\">const</span> T&amp; theElement,</span><br><span class=\"line\">                   binaryTreeNode *theLeftChild = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">                   binaryTreeNode *theRightChild = <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">element</span>(theElement)</span><br><span class=\"line\">        leftChild = theLeftChild;</span><br><span class=\"line\">        rightChild = theRightChild;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"二叉树的操作\">二叉树的操作</h3>\r\n<h4 id=\"前序遍历\">前序遍历</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(binaryTreeNode&lt;T&gt; *t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;t-&gt;element;</span><br><span class=\"line\">        <span class=\"built_in\">preOrder</span>(t-&gt;leftChild);</span><br><span class=\"line\">        <span class=\"built_in\">preOrder</span>(t-&gt;rightChild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"中序遍历\">中序遍历</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(binaryTreeNode&lt;T&gt; *t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">inOrder</span>(t-&gt;leftChild);</span><br><span class=\"line\">        cout&lt;&lt;t-&gt;element;</span><br><span class=\"line\">        <span class=\"built_in\">inOrder</span>(t-&gt;rightChild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"后序遍历\">后序遍历</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">(binaryTreeNode&lt;T&gt; *t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">postOrder</span>(t-&gt;leftChild);</span><br><span class=\"line\">        <span class=\"built_in\">postOrder</span>(t-&gt;rightChild);</span><br><span class=\"line\">        cout&lt;&lt;t-&gt;element;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"层序遍历\">层序遍历</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">levelOrder</span><span class=\"params\">(binaryTreeNode&lt;T&gt; *t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(t);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t-&gt;leftChild != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(t-&gt;leftChild);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t-&gt;rightChild != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(t-&gt;rightChild);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;t = q.<span class=\"built_in\">front</span>();&#125;</span><br><span class=\"line\">        <span class=\"built_in\">catch</span> (queueEmpty) &#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","text":"二叉树 树 定义 一棵树t是一个非空的有限元素的集合，其中一个元素为根（root），其余元素组成t的子树（subtree） 在层次数据中最高层的元素是根，其直接下一级元素是子树的根 树的画法 在画一棵树时，每一个元素都代表一个节点。树根画在最上方，其子树画在下面。在根和子树的根之...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">二叉树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%91\"><span class=\"toc-text\">树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%91%E7%9A%84%E7%94%BB%E6%B3%95\"><span class=\"toc-text\">树的画法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%AF%E8%AF%AD\"><span class=\"toc-text\">术语</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91-1\"><span class=\"toc-text\">二叉树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-1\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%92%8C%E6%A0%91%E7%9A%84%E6%A0%B9%E6%9C%AC%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">和树的根本区别</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">二叉树的特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">二叉树的描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">二叉树的操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">前序遍历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">中序遍历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">后序遍历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">层序遍历</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"碔砆","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"机器学习基础","uid":"e9525b7ef8e5ead70d9f4aba30aa5c7e","slug":"机器学习基础","date":"2023-02-18T08:33:33.000Z","updated":"2023-02-18T09:56:18.012Z","comments":true,"path":"api/articles/机器学习基础.json","keywords":null,"cover":null,"text":"机器学习基础 DL 1.学习算法 机器学习算法是一种能够从数据中学习的算法，可定义为 ”对于某类任务T和性能度量P，一个计算机程序被认为可以从经验E中学习是指，通过经验E改进后，它在任务T上由性能度量P衡量的性能有所提升\" 1.1 任务T 学习的过程本身并不是任务，学习是所谓获取...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"AI学习","slug":"AI学习","count":4,"path":"api/categories/AI学习.json"}],"tags":[{"name":"AI学习","slug":"AI学习","count":4,"path":"api/tags/AI学习.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"线性表","uid":"b96df039eaa03d2a5634c2cc83e5cad0","slug":"线性表","date":"2022-04-20T01:41:09.000Z","updated":"2022-04-20T01:41:09.782Z","comments":true,"path":"api/articles/线性表.json","keywords":null,"cover":null,"text":" ","link":"","photos":[],"count_time":{"symbolsCount":2,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}