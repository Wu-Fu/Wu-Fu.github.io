{"title":"动态规划","uid":"f6af5bf3fb5f66f52237908153c03aea","slug":"动态规划","date":"2022-01-15T01:55:19.000Z","updated":"2022-01-15T12:52:42.639Z","comments":true,"path":"api/articles/动态规划.json","keywords":null,"cover":null,"content":"<h1 id=\"动态规划dp\">动态规划DP</h1>\r\n<p><a href=\"https://oi-wiki.org/dp/basic/\">动态规划——OIWiki</a></p>\r\n<h3 id=\"思路\">思路</h3>\r\n<p>应用于子问题重叠的情况，即不同的子问题拥有公共的子问题</p>\r\n<p>（子问题的求解是递归进行的，将其划分为更小的子子问题）</p>\r\n<p>对于每个子子问题只求解一次，并将其保存在一个表格中。 ####\r\n最优子结构性质\r\n问题的最优解由相关子问题的最优解组合而成，而这些子问题可以独立求解 ###\r\n基础步骤 - 刻画最优解的结构特征（思考最优解的形式） -\r\n尝试递归的定义最优解的值（即考虑从<span\r\nclass=\"math inline\">\\(i-1\\)</span>转移到<span\r\nclass=\"math inline\">\\(i\\)</span>） - 计算最优解 -\r\n利用计算出的信息构造最优解</p>\r\n<h3 id=\"实现方法\">实现方法</h3>\r\n<ul>\r\n<li>带备忘的自顶向下法\r\n按自然递归形式编写，在过程中保存各个子问题的解</li>\r\n<li>自底向上法 将子问题按规模由从小到大的顺序求解</li>\r\n</ul>\r\n","text":"动态规划DP 动态规划——OIWiki 思路 应用于子问题重叠的情况，即不同的子问题拥有公共的子问题 （子问题的求解是递归进行的，将其划分为更小的子子问题） 对于每个子子问题只求解一次，并将其保存在一个表格中。 #### 最优子结构性质 问题的最优解由相关子问题的最优解组合而成，...","link":"","photos":[],"count_time":{"symbolsCount":327,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dp\"><span class=\"toc-text\">动态规划DP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">实现方法</span></a></li></ol></li></ol></li></ol>","author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"背包DP","uid":"4421686b118d9483ed6838244ba67f35","slug":"背包DP","date":"2022-01-15T07:21:57.000Z","updated":"2023-02-18T11:08:52.870Z","comments":true,"path":"api/articles/背包DP.json","keywords":null,"cover":null,"text":"背包DP 背包DP——OIWiki 0-1背包 已知条件有第个物品的重量，价值，以及背包的总容量,每个物体只有取和不取两种状态 设 DP 状态为在只能放前个物品的情况下，容量为的背包所能达到的最大总价值 状态转移方程 枚举时，从枚举到，保证总是在前被更新 for (int i =...","link":"","photos":[],"count_time":{"symbolsCount":984,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"并查集","uid":"c18469ab20e7b093d36b4a61728d07eb","slug":"并查集","date":"2022-01-13T07:25:39.000Z","updated":"2022-01-14T08:52:36.217Z","comments":true,"path":"api/articles/并查集.json","keywords":null,"cover":null,"text":"并查集 并查集——OIwiki 并查集——知乎 种类并查集——知乎 应用 并查集判环 ","link":"","photos":[],"count_time":{"symbolsCount":53,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}