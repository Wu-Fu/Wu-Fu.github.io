{"title":"贪心算法","uid":"827701aa0aeba949971d70c354c78372","slug":"贪心算法","date":"2022-01-13T02:24:15.000Z","updated":"2022-04-20T01:55:07.726Z","comments":true,"path":"api/articles/贪心算法.json","keywords":null,"cover":null,"content":"<h1 id=\"贪心\">贪心</h1>\r\n<h3 id=\"基本思路\">基本思路</h3>\r\n<p>每一步行动总是采取最优解</p>\r\n<h3 id=\"适用范围\">适用范围</h3>\r\n<p>贪心算法在有最优子结构的问题中尤为有效。</p>\r\n<p>最优子结构的意思是问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解</p>\r\n<h3 id=\"证明方法\">证明方法</h3>\r\n<ol type=\"1\">\r\n<li>微扰(邻项交换)：证明再任意局面下，任何对局部最优策略的微小改变都会造成整体结果变差。(常用于以“排序”为贪心策略的证明)</li>\r\n<li>范围缩放：证明任何对局部最优策略作用范围的扩展都不会造成整体结果变差</li>\r\n<li>决策包容性：证明在任意局面下，做出局部最优决策后，在问题状态空间的可达集合包含了作出其他任何决策后的可达集合。换言之，这个局部最优决策提供的可能性包含其他所有策略提供的可能性。</li>\r\n<li>反证法：交换方案中任意两个元素，如果答案没变好，贪心即最优解</li>\r\n<li>归纳法：先找出边界情况<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.266ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3211.6 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1266.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2322.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2822.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>的最优解F<sub>1</sub>，然后再证明：对每个n，F<sub>n+1</sub>都能由F<sub>n</sub>推出</li>\r\n</ol>\r\n<h3 id=\"常见题型\">常见题型</h3>\r\n<ul>\r\n<li>「我们将 XXX\r\n按照某某顺序排序，然后按某种顺序（例如从小到大）选择。」</li>\r\n<li>「我们每次都取 XXX 中最大/小的东西，并更新 XXX」（有时「XXX\r\n中最大/小的东西」可以优化，比如用优先队列维护）</li>\r\n<li>背包相关问题：给出n个物体，第i个物体重量为w<sub>i</sub>。选择尽量多的物体，使得总重量不超过C</li>\r\n<li>区间相关问题：数轴上有n个开区间(a<sub>i</sub>,b<sub>i</sub>)。选择尽量多区间，使这些区间两两没有公共点</li>\r\n<li>Huffman编码：给出n个字符的频率c<sub>i</sub>,给每个字符赋予一个01编码串，使得任意一个字符的编码不是另一个字符编码的前缀，而且编码后的总长度尽量小</li>\r\n</ul>\r\n<h3 id=\"例题\">例题</h3>\r\n<p>区间相关问题 1. 按右端点排序，取与之前不冲突的区间 2.\r\n求最大相交区间</p>\r\n","text":"贪心 基本思路 每一步行动总是采取最优解 适用范围 贪心算法在有最优子结构的问题中尤为有效。 最优子结构的意思是问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解 证明方法 微扰(邻项交换)：证明再任意局面下，任何对局部最优策略的微小改变都会造成整体结果变差。(常...","link":"","photos":[],"count_time":{"symbolsCount":694,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B4%AA%E5%BF%83\"><span class=\"toc-text\">贪心</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">基本思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%82%E7%94%A8%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">适用范围</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%81%E6%98%8E%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">证明方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B\"><span class=\"toc-text\">常见题型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E9%A2%98\"><span class=\"toc-text\">例题</span></a></li></ol></li></ol></li></ol>","author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"并查集","uid":"c18469ab20e7b093d36b4a61728d07eb","slug":"并查集","date":"2022-01-13T07:25:39.000Z","updated":"2022-01-14T08:52:36.217Z","comments":true,"path":"api/articles/并查集.json","keywords":null,"cover":null,"text":"并查集 并查集——OIwiki 并查集——知乎 种类并查集——知乎 应用 并查集判环 ","link":"","photos":[],"count_time":{"symbolsCount":53,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}