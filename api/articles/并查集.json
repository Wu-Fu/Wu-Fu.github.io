{"title":"并查集","uid":"c18469ab20e7b093d36b4a61728d07eb","slug":"并查集","date":"2022-01-13T07:25:39.000Z","updated":"2022-01-14T08:52:36.217Z","comments":true,"path":"api/articles/并查集.json","keywords":null,"cover":null,"content":"<h1 id=\"并查集\">并查集</h1>\r\n<p><a href=\"https://oi-wiki.org/ds/dsu/\">并查集——OIwiki</a></p>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/93647900\">并查集——知乎</a></p>\r\n<p><a\r\nhref=\"https://zhuanlan.zhihu.com/p/97813717\">种类并查集——知乎</a></p>\r\n<h1 id=\"应用\">应用</h1>\r\n<ul>\r\n<li>并查集判环</li>\r\n</ul>\r\n","text":"并查集 并查集——OIwiki 并查集——知乎 种类并查集——知乎 应用 并查集判环 ","link":"","photos":[],"count_time":{"symbolsCount":53,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E6%9F%A5%E9%9B%86\"><span class=\"toc-text\">并查集</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">应用</span></a></li></ol>","author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"动态规划","uid":"f6af5bf3fb5f66f52237908153c03aea","slug":"动态规划","date":"2022-01-15T01:55:19.000Z","updated":"2022-01-15T12:52:42.639Z","comments":true,"path":"api/articles/动态规划.json","keywords":null,"cover":null,"text":"动态规划DP 动态规划——OIWiki 思路 应用于子问题重叠的情况，即不同的子问题拥有公共的子问题 （子问题的求解是递归进行的，将其划分为更小的子子问题） 对于每个子子问题只求解一次，并将其保存在一个表格中。 #### 最优子结构性质 问题的最优解由相关子问题的最优解组合而成，...","link":"","photos":[],"count_time":{"symbolsCount":327,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"贪心算法","uid":"827701aa0aeba949971d70c354c78372","slug":"贪心算法","date":"2022-01-13T02:24:15.000Z","updated":"2022-04-20T01:55:07.726Z","comments":true,"path":"api/articles/贪心算法.json","keywords":null,"cover":null,"text":"贪心 基本思路 每一步行动总是采取最优解 适用范围 贪心算法在有最优子结构的问题中尤为有效。 最优子结构的意思是问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解 证明方法 微扰(邻项交换)：证明再任意局面下，任何对局部最优策略的微小改变都会造成整体结果变差。(常...","link":"","photos":[],"count_time":{"symbolsCount":694,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}