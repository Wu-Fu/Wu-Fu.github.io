{"title":"机器学习基础","uid":"e9525b7ef8e5ead70d9f4aba30aa5c7e","slug":"机器学习基础","date":"2023-02-18T08:33:33.000Z","updated":"2023-02-18T08:59:31.442Z","comments":true,"path":"api/articles/机器学习基础.json","keywords":null,"cover":null,"content":"<h1 id=\"机器学习基础\">机器学习基础</h1>\r\n<p>DL ## 1.学习算法 机器学习算法是一种能够从数据中学习的算法，可定义为\r\n<strong>”对于某类任务T和性能度量P，一个计算机程序被认为可以从经验E中学习是指，通过经验E改进后，它在任务T上由性能度量P衡量的性能有所提升\"</strong>\r\n### 1.1 任务T\r\n学习的过程本身并不是任务，学习是所谓获取完成任务的能力的过程\r\n通常来讲，机器学习任务被定义为 机器学习系统应该如何处理\r\n<strong>样本(example)</strong>\r\n样本是指我们从某些希望机器学习系统处理的对象或事件中收集到的已经量化的\r\n<strong>特征(feature)</strong> 的集合 ### 1.2 性能度量P\r\n为评估机器学习算法的能力，设计其性能的定量度量是有必要的\r\n通常性能度量P是特定于任务T的，如分类型任务，性能度量P为准确率acc\r\n对性能度量P的衡量主要聚焦于未观测数据，即 <strong>测试集(test\r\nset)</strong> 上\r\n对于很多模型，选择一个与系统理想表现对应的性能度量通常是很有难度的 ###\r\n1.3 经验E 根据学习过程中的不同经验，机器学习算法可以大致分类为\r\n<strong>无监督算法</strong> 和 <strong>有监督算法</strong>\r\n二者间主要区别来自于这样的一个视角：老师提供目标y给机器学习系统，指导其应该作什么。在无监督算法中则没有老师这样的角色，算法必须在没有指导的情况下理解数据\r\n## 2. 容量、过拟合和欠拟合 机器学习的重要目的就是在观测到的数据，即\r\n<strong>训练集</strong> 上的表现良好之外，也在测试集上表现良好\r\n这之中主要涉及一个算法的 <strong>泛化(generalization)</strong> 能力\r\n统计学习理论对泛化能力的提升给出了相应的方法：\r\n训练集和测试集数据通过数据集上被称为 <strong>数据生成过程(data\r\ngenerating process)</strong> 的概率分布生成。而在这一过程中采取\r\n<strong>独立同分布(i.i.d assumption)</strong>\r\n的假设，对提升泛化能力非常重要\r\n独立同分布指，每个数据集中的样本都是彼此相互独立的，并且训练集和测试集是同分布的\r\n这么做可以使得随机模型的训练误差期望和测试误差期望是一致的\r\n从中，我们可以延申出决定机器学习算法效果是否好的两个因素： -\r\n降低训练误差 - 缩小训练误差和测试误差的差距</p>\r\n<p>而这两个因素又分别对应着机器学习的两个主要挑战：<strong>欠拟合(underfitting)</strong>\r\n和 <strong>过拟合(overfitting)</strong>\r\n欠拟合指模型不能在训练集上获得足够低的误差，过拟合指训练误差和测试误差之间的差距过大\r\n由此又另外延申出一个模型的概念：<strong>容量(capacity)</strong>\r\n容量指一个模型拟合各种函数的能力，容量过高则会使模型记住了不适于测试集的训练集性质从而表现为过拟合\r\n一种常见的控制容量的方法是选择 <strong>假设空间(hypothesis\r\nspace)</strong> ，即学习算法的选择范围为解决方法的函数集\r\n主要控制容量的方法是：改变输入特征的数目和加入这些特征对应的参数\r\n而在这一过程中，应当遵循 <strong>奥卡姆剃刀原理</strong>\r\n对于容量任意高的极端情况，则归于 <strong>非参数模型</strong> 的概念\r\n非参数模型，指模型的参数会随着输入特征的变多而变多\r\n与参数模型相比，非参数模型更为灵活，所需要的假设更少，但一个严重的问题在于对于大部分数据而言计算困难\r\n### 2.1 没有免费午餐定理\r\n对于不同的问题，通常需要设计不同的模型，而学习理论也表明机器学习算法可以在有限个训练集样本中很好地泛化\r\n但是，必须强调，不存在万能的最佳模型，即 <strong>没有免费午餐定理(no\r\nfree lunch theorem)</strong>\r\n这一理论表明，在所有可能的数据生成分布上平均之后，每一个分类算法在未事先观测的点上具有相同的错误率\r\n但必须强调，这一定理仅在考虑所有可能的数据生成分布时才成立\r\n在实际应用中，我们常对所遇到的概率分布进行假设，并针对该假设设计表现良好的算法\r\n### 2.2 正则化(TO DO) <strong>正则化(regularization)</strong>\r\n是指修改学习算法，使其降低泛化误差而非训练误差 ### 2.3 超参数和验证集\r\n<strong>超参数(hyper-parameter)</strong>\r\n常被设置用以控制算法的行为，超参数不是通过学习算法本身学习出来的\r\n常见的设置超参数的原因是该参数不适合在训练集上学习，如控制模型容量的所有超参数\r\n如果在训练集上训练这些超参数，这些超参数总是会区域最大可能的模型容量从而导致过拟合\r\n为解决这个问题，引出一个训练算法观测不到的 <strong>验证集(validation\r\nset)</strong> 样本 验证集重要用于挑选模型的超参数\r\n验证集的重点在于<strong>测试样本不能以任何形式参与到模型的选择之中</strong>，包括设置超参数\r\n也是因此，之前提到的测试集中的样本不能用于验证集\r\n通常情况下，经常将用于学习参数的训练集中挑选子集来构建验证集，比例常见为4：1\r\n#### 2.3.1 交叉验证\r\n在训练中，若训练集的误差很小，在数据集太小时，可能会带来一些问题\r\n一个小规模的测试集意味着平均测试误差估计的统计不确定性，使得很难判断算法A、B之间在给定任务上的优劣\r\n常见的一个解决方法为<strong>k-fold交叉验证</strong>\r\n算法如下：将训练集分为k个互斥子集，训练除第k个子集外的每一个子集，并在第k个子集上进行测试，以这种方式进行滚动式循环训练。之后，计算所有子集的平均误差，并以此来代替测试误差\r\n（tips：每个点只用于一次测试，和n-1次训练） ### 2.4 估计、偏差和方差（TO\r\nDO） #### 2.4.1 点估计 #### 2.4.2 偏差 #### 2.4.3 方差和标准差 ####\r\n2.4.4 权衡偏差和方差以最小化均分误差 #### 2.4.5 一致性 ### 2.5\r\n最大似然估计 MLAPP 217 估计统计模型参数<span\r\nclass=\"math inline\">\\(\\theta\\)</span>的一种常见方法是计算其<strong>最大似然估计(Maximum\r\nlikelihood estimation，MLE)</strong> 对<span\r\nclass=\"math inline\">\\(\\theta\\)</span>的<strong>最大似然估计</strong>定义为：\r\n<span class=\"math display\">\\[\r\n\\begin{aligned}\r\n\\theta_{ML}&amp;=\\arg \\max_\\theta p_{model}(X;\\theta)\\\\\r\n&amp;=\\arg \\max_\\theta \\prod_{i=1}^{m} p_{model}(x^{(i)};\\theta)\r\n\\end{aligned}\\]</span> 为简便运算，常将原函数进行取对数处理\r\n在实际进行代码运行时，我们更经常等价地采取最小化负对数的似然\r\n一种解释最大似然估计的观点是将它看作最小化训练集上的经验分布和数据之间的差异，二者间的差异程度由KL散度度量\r\n<span class=\"math display\">\\[KL(p||q)=E_{x\\sim \\hat p_{data}}[log\\ \\hat\r\np_{data}(x)-log\\ p_{data}(x)]\\]</span>\r\n其中左边一项仅涉及数据生成过程，因此只需要最小化<span\r\nclass=\"math inline\">\\(-E_{x\\sim \\hat p_{data}}[log\\\r\np_{data}(x)]\\)</span> #### 2.5.1 条件对数似然和均方误差（to do）\r\n由之前最大似然估计的定义，可进一步拓展到估计条件概率<span\r\nclass=\"math inline\">\\(P(y|x;\\theta)\\)</span>从而给定x预测y\r\n而这就构成了大多数监督学习的基础 #### 2.5.2 最大似然的性质\r\n最大似然估计的最重要的一点在于，它被证明了当样本数目<span\r\nclass=\"math inline\">\\(m\\rightarrow\r\n\\infty\\)</span>时，就收敛率而言是最好的渐进估计\r\n在以下条件下，最大似然估计具有一致性 - 真实分布<span\r\nclass=\"math inline\">\\(p_{data}\\)</span>必须在模型族<span\r\nclass=\"math inline\">\\(p_{model}(\\cdot\r\n;\\theta)\\)</span>中，否则，没有估计科研还原<span\r\nclass=\"math inline\">\\(p_{data}\\)</span> - 真实分布<span\r\nclass=\"math inline\">\\(p_{data}\\)</span>必须刚好对应一个<span\r\nclass=\"math inline\">\\(\\theta\\)</span>值，否则，最大似然估计恢复除真实分布<span\r\nclass=\"math inline\">\\(p_{data}\\)</span>后，也不能决定数据生成过程使用哪个<span\r\nclass=\"math inline\">\\(\\theta\\)</span>\r\n除了最大似然估计之外，还有其他的归纳准则，且都具有一致性\r\n但这些一致估计的 <strong>统计效率(statistic efficiency)</strong>\r\n可能区别很大\r\n在综合考虑了一致性和统计效率之后，最大似然通常是机器学习中的首选估计方法\r\n### 2.6 贝叶斯统计 ### 2.7 监督学习算法 ### 2.8 无监督学习算法 ### 2.9\r\n随机梯度下降</p>\r\n","feature":true,"text":"机器学习基础 DL ## 1.学习算法 机器学习算法是一种能够从数据中学习的算法，可定义为 ”对于某类任务T和性能度量P，一个计算机程序被认为可以从经验E中学习是指，通过经验E改进后，它在任务T上由性能度量P衡量的性能有所提升\" ### 1.1 任务T 学习的过程本身并不是任务，...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"AI","slug":"AI","count":1,"path":"api/tags/AI.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">机器学习基础</span></a></li></ol>","author":{"name":"碔砆","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"STL","uid":"48433a70b7e09e957d48f01fa1012852","slug":"STL","date":"2022-01-15T12:53:20.000Z","updated":"2023-02-18T07:58:18.522Z","comments":true,"path":"api/articles/STL.json","keywords":null,"cover":null,"text":"STL STL——OIWiki ## 共同点 声明形式： 容器名&lt;数据类型&gt; 变量名 迭代器：用来访问和检查STL容器中的元素的对象，与数据指针类似。主要支持自增（++）和解引用（*）运算符，其中自增用来移动迭代器，解引用可以获取或修改它指向的元素。 用法：容器名&l...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"算法","slug":"算法","count":2,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}