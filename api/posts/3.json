{"total":31,"pageSize":12,"pageCount":3,"data":[{"title":"最短路","uid":"530e1936c4d6e837f2bf21a86f73c106","slug":"最短路","date":"2022-01-16T07:42:55.000Z","updated":"2022-01-17T07:53:02.872Z","comments":true,"path":"api/articles/最短路.json","cover":null,"text":"最短路 性质 对于边权为正的图，任意两个结点之间的最短路，不会经过重复的结点 对于边权为正的图，任意两个结点之间的最短路，不会经过重复的边 对于边权为正的图，任意两个结点之间的最短路，任意一条的结点数不会超过n，边数不会超过n-1 记号 n为图上点的数目，m为图上边的数目 s为最...","link":"","photos":[],"count_time":{"symbolsCount":226,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"STL","uid":"48433a70b7e09e957d48f01fa1012852","slug":"STL","date":"2022-01-15T12:53:20.000Z","updated":"2023-02-18T09:56:49.745Z","comments":true,"path":"api/articles/STL.json","cover":null,"text":"STL STL——OIWiki 共同点 声明形式： 容器名&lt;数据类型&gt; 变量名 迭代器：用来访问和检查STL容器中的元素的对象，与数据指针类似。主要支持自增（++）和解引用（*）运算符，其中自增用来移动迭代器，解引用可以获取或修改它指向的元素。 用法：容器名&lt;数...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"背包DP","uid":"4421686b118d9483ed6838244ba67f35","slug":"背包DP","date":"2022-01-15T07:21:57.000Z","updated":"2023-02-18T11:35:42.757Z","comments":true,"path":"api/articles/背包DP.json","cover":null,"text":"背包DP 背包DP——OIWiki 0-1背包 已知条件有第个物品的重量，价值，以及背包的总容量,每个物体只有取和不取两种状态 设 DP 状态为在只能放前个物品的情况下，容量为的背包所能达到的最大总价值 状态转移方程 枚举时，从枚举到，保证总是在前被更新 for (int i =...","link":"","photos":[],"count_time":{"symbolsCount":984,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"动态规划","uid":"f6af5bf3fb5f66f52237908153c03aea","slug":"动态规划","date":"2022-01-15T01:55:19.000Z","updated":"2022-01-15T12:52:42.639Z","comments":true,"path":"api/articles/动态规划.json","cover":null,"text":"动态规划DP 动态规划——OIWiki 思路 应用于子问题重叠的情况，即不同的子问题拥有公共的子问题 （子问题的求解是递归进行的，将其划分为更小的子子问题） 对于每个子子问题只求解一次，并将其保存在一个表格中。 #### 最优子结构性质 问题的最优解由相关子问题的最优解组合而成，...","link":"","photos":[],"count_time":{"symbolsCount":327,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"并查集","uid":"c18469ab20e7b093d36b4a61728d07eb","slug":"并查集","date":"2022-01-13T07:25:39.000Z","updated":"2022-01-14T08:52:36.217Z","comments":true,"path":"api/articles/并查集.json","cover":null,"text":"并查集 并查集——OIwiki 并查集——知乎 种类并查集——知乎 应用 并查集判环 ","link":"","photos":[],"count_time":{"symbolsCount":53,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"贪心算法","uid":"827701aa0aeba949971d70c354c78372","slug":"贪心算法","date":"2022-01-13T02:24:15.000Z","updated":"2022-04-20T01:55:07.726Z","comments":true,"path":"api/articles/贪心算法.json","cover":null,"text":"贪心 基本思路 每一步行动总是采取最优解 适用范围 贪心算法在有最优子结构的问题中尤为有效。 最优子结构的意思是问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解 证明方法 微扰(邻项交换)：证明再任意局面下，任何对局部最优策略的微小改变都会造成整体结果变差。(常...","link":"","photos":[],"count_time":{"symbolsCount":694,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"最小公倍数LCM","uid":"f39f5057e79f1bc6b78f8eec0e6063d5","slug":"最小公倍数LCM","date":"2022-01-12T10:29:18.000Z","updated":"2022-01-12T12:05:21.966Z","comments":true,"path":"api/articles/最小公倍数LCM.json","cover":null,"text":"最小公倍数LCM 原理 最大公约数法 最小公倍数 = 两整数的乘积 ➗ 最大公倍数 前置知识——最大公因数GCD ","link":"","photos":[],"count_time":{"symbolsCount":62,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":11,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"}],"author":{"name":"碔砆","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/02/20/pSXmfmj.jpg","link":"/","description":"BUPT AI专业大二学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}